#!/bin/bash
# Fix S1 Call Generator compilation errors

cd /home/car/s1-callgen

# Fix generator.go imports and struct issues
cat > internal/generator/generator.go << 'EOF'
package generator

import (
    "encoding/csv"
    "log"
    "math/rand"
    "net"
    "os"
    "sync"
    "time"
    
    "github.com/s1-callgen/internal/models"
    "github.com/s1-callgen/internal/sip"
)

type Generator struct {
    config      *models.Config
    sipClient   *sip.Client
    numberPairs []models.NumberPair
    stats       *Statistics
    mu          sync.RWMutex
    stopChan    chan bool
    wg          sync.WaitGroup
}

type Statistics struct {
    TotalCalls      int64
    SuccessfulCalls int64
    FailedCalls     int64
    ActiveCalls     int64
    StartTime       time.Time
    mu              sync.Mutex
}

func NewGenerator(config *models.Config) (*Generator, error) {
    // Get local IP
    localIP := getLocalIP()
    
    // Create SIP client
    sipClient, err := sip.NewClient(localIP, 5070, config.S2Server.Host, config.S2Server.Port)
    if err != nil {
        return nil, err
    }
    
    return &Generator{
        config:    config,
        sipClient: sipClient,
        stats: &Statistics{
            StartTime: time.Now(),
        },
        stopChan: make(chan bool),
    }, nil
}

func (g *Generator) LoadNumbersFromCSV(filename string) error {
    file, err := os.Open(filename)
    if err != nil {
        return err
    }
    defer file.Close()
    
    reader := csv.NewReader(file)
    records, err := reader.ReadAll()
    if err != nil {
        return err
    }
    
    g.mu.Lock()
    defer g.mu.Unlock()
    
    g.numberPairs = make([]models.NumberPair, 0, len(records))
    for _, record := range records {
        if len(record) >= 2 {
            g.numberPairs = append(g.numberPairs, models.NumberPair{
                ANI:  record[0],
                DNIS: record[1],
            })
        }
    }
    
    log.Printf("[GENERATOR] Loaded %d number pairs", len(g.numberPairs))
    return nil
}

func (g *Generator) LoadTestNumbers() {
    g.mu.Lock()
    defer g.mu.Unlock()
    
    g.numberPairs = []models.NumberPair{
        {ANI: "19543004835", DNIS: "50764137984"},
        {ANI: "19543004836", DNIS: "50764137985"},
        {ANI: "19543004837", DNIS: "50764137986"},
        {ANI: "19543004838", DNIS: "50764137987"},
        {ANI: "19543004839", DNIS: "50764137988"},
    }
}

func (g *Generator) Start() error {
    if err := g.sipClient.Connect(); err != nil {
        return err
    }
    
    log.Printf("[GENERATOR] Starting call generation")
    log.Printf("Parameters: ACD=%d-%ds, ASR=%.0f%%, Max Concurrent=%d, CPS=%.2f",
        g.config.CallParams.ACDMin, g.config.CallParams.ACDMax,
        g.config.CallParams.ASR, g.config.CallParams.MaxConcurrent,
        g.config.CallParams.CallsPerSecond)
    
    // Start call generation loop
    g.wg.Add(1)
    go g.generateCalls()
    
    // Start statistics reporter
    g.wg.Add(1)
    go g.reportStatistics()
    
    return nil
}

func (g *Generator) generateCalls() {
    defer g.wg.Done()
    
    // Calculate interval between calls
    interval := time.Duration(float64(time.Second) / g.config.CallParams.CallsPerSecond)
    ticker := time.NewTicker(interval)
    defer ticker.Stop()
    
    for {
        select {
        case <-ticker.C:
            // Check if we should make a call based on schedule
            if !g.isWithinSchedule() {
                continue
            }
            
            // Check concurrent call limit
            if g.sipClient.GetActiveCallCount() >= g.config.CallParams.MaxConcurrent {
                continue
            }
            
            // Make a call
            g.wg.Add(1)
            go g.makeCall()
            
        case <-g.stopChan:
            return
        }
    }
}

func (g *Generator) makeCall() {
    defer g.wg.Done()
    
    // Get random number pair
    g.mu.RLock()
    if len(g.numberPairs) == 0 {
        g.mu.RUnlock()
        return
    }
    pair := g.numberPairs[rand.Intn(len(g.numberPairs))]
    g.mu.RUnlock()
    
    // Determine if call should be answered based on ASR
    shouldAnswer := rand.Float64()*100 < g.config.CallParams.ASR
    
    g.stats.mu.Lock()
    g.stats.TotalCalls++
    g.stats.ActiveCalls++
    g.stats.mu.Unlock()
    
    if shouldAnswer {
        // Random duration between ACDMin and ACDMax
        duration := time.Duration(g.config.CallParams.ACDMin+rand.Intn(g.config.CallParams.ACDMax-g.config.CallParams.ACDMin)) * time.Second
        
        err := g.sipClient.MakeCall(pair.ANI, pair.DNIS, duration)
        
        g.stats.mu.Lock()
        if err == nil {
            g.stats.SuccessfulCalls++
        } else {
            g.stats.FailedCalls++
            log.Printf("[GENERATOR] Call failed: %v", err)
        }
        g.stats.ActiveCalls--
        g.stats.mu.Unlock()
    } else {
        // Simulate rejected call
        time.Sleep(5 * time.Second)
        
        g.stats.mu.Lock()
        g.stats.FailedCalls++
        g.stats.ActiveCalls--
        g.stats.mu.Unlock()
    }
}

func (g *Generator) isWithinSchedule() bool {
    now := time.Now()
    hour := now.Hour()
    
    var startHour, endHour int
    
    if now.Weekday() == time.Saturday || now.Weekday() == time.Sunday {
        startHour = g.config.Schedule.Weekend.StartHour
        endHour = g.config.Schedule.Weekend.EndHour
    } else {
        startHour = g.config.Schedule.Weekday.StartHour
        endHour = g.config.Schedule.Weekday.EndHour
    }
    
    return hour >= startHour && hour < endHour
}

func (g *Generator) reportStatistics() {
    defer g.wg.Done()
    
    ticker := time.NewTicker(10 * time.Second)
    defer ticker.Stop()
    
    for {
        select {
        case <-ticker.C:
            g.stats.mu.Lock()
            elapsed := time.Since(g.stats.StartTime)
            cps := float64(g.stats.TotalCalls) / elapsed.Seconds()
            asr := float64(0)
            if g.stats.TotalCalls > 0 {
                asr = float64(g.stats.SuccessfulCalls) / float64(g.stats.TotalCalls) * 100
            }
            
            log.Printf("[STATS] Total: %d, Success: %d, Failed: %d, Active: %d, CPS: %.2f, ASR: %.1f%%",
                g.stats.TotalCalls, g.stats.SuccessfulCalls, g.stats.FailedCalls,
                g.stats.ActiveCalls, cps, asr)
            g.stats.mu.Unlock()
            
        case <-g.stopChan:
            return
        }
    }
}

func (g *Generator) Stop() {
    close(g.stopChan)
    g.wg.Wait()
    g.sipClient.Close()
}

func getLocalIP() string {
    // Try to get the primary network interface IP
    interfaces, err := net.Interfaces()
    if err != nil {
        return "10.0.0.1"
    }
    
    for _, iface := range interfaces {
        if iface.Flags&net.FlagUp == 0 || iface.Flags&net.FlagLoopback != 0 {
            continue
        }
        
        addrs, err := iface.Addrs()
        if err != nil {
            continue
        }
        
        for _, addr := range addrs {
            if ipnet, ok := addr.(*net.IPNet); ok && ipnet.IP.To4() != nil {
                if ipnet.IP.String() != "127.0.0.1" {
                    return ipnet.IP.String()
                }
            }
        }
    }
    
    return "10.0.0.1"
}
EOF

# Fix the RTP module to include fmt import
cat > internal/sip/rtp.go << 'EOF'
package sip

import (
    "encoding/binary"
    "fmt"
    "math/rand"
    "net"
    "time"
)

type RTPPacket struct {
    Version        uint8
    Padding        bool
    Extension      bool
    CSRCCount      uint8
    Marker         bool
    PayloadType    uint8
    SequenceNumber uint16
    Timestamp      uint32
    SSRC           uint32
    Payload        []byte
}

func SendRTPStream(localIP string, localPort int, remoteIP string, remotePort int, duration time.Duration) error {
    conn, err := net.Dial("udp", fmt.Sprintf("%s:%d", remoteIP, remotePort))
    if err != nil {
        return err
    }
    defer conn.Close()
    
    // RTP parameters
    ssrc := uint32(rand.Int31())
    sequenceNumber := uint16(rand.Intn(65535))
    timestamp := uint32(rand.Int31())
    
    // Send RTP packets (50 packets per second for 20ms intervals)
    ticker := time.NewTicker(20 * time.Millisecond)
    defer ticker.Stop()
    
    timeout := time.After(duration)
    
    for {
        select {
        case <-ticker.C:
            packet := createRTPPacket(sequenceNumber, timestamp, ssrc)
            conn.Write(packet)
            sequenceNumber++
            timestamp += 160 // 160 samples at 8kHz for 20ms
        case <-timeout:
            return nil
        }
    }
}

func createRTPPacket(seq uint16, ts uint32, ssrc uint32) []byte {
    packet := make([]byte, 12+160) // RTP header + 160 bytes of audio
    
    // RTP header
    packet[0] = 0x80 // Version 2, no padding, no extension, no CSRC
    packet[1] = 0    // Marker = 0, Payload type = 0 (PCMU)
    
    binary.BigEndian.PutUint16(packet[2:4], seq)
    binary.BigEndian.PutUint32(packet[4:8], ts)
    binary.BigEndian.PutUint32(packet[8:12], ssrc)
    
    // Fill with silence (0xFF for PCMU)
    for i := 12; i < len(packet); i++ {
        packet[i] = 0xFF
    }
    
    return packet
}
EOF

# Now rebuild the S1 project
echo "Rebuilding S1 Call Generator..."
go mod tidy
make build

if [ $? -eq 0 ]; then
    echo "S1 Call Generator built successfully!"
else
    echo "Build failed, trying direct compilation..."
    go build -o bin/callgen cmd/callgen/main.go
fi

# Create a test runner script
cat > run_s1_test.sh << 'EOF'
#!/bin/bash

echo "Starting S1 Call Generator Test..."

# Check if S2 is reachable
if ! nc -z 10.0.0.2 5060 2>/dev/null; then
    echo "Error: S2 (10.0.0.2:5060) is not reachable"
    exit 1
fi

# Start with test configuration
cd /home/car/s1-callgen

# Create a test config with lower call rate
cat > configs/test_config.json << 'JSON'
{
    "s2_server": {
        "host": "10.0.0.2",
        "port": 5060
    },
    "call_params": {
        "acd_min": 10,
        "acd_max": 30,
        "asr": 80.0,
        "max_concurrent": 5,
        "calls_per_second": 0.5,
        "ramp_up_time": 10,
        "ramp_down_time": 10
    },
    "schedule": {
        "weekday": {
            "start_hour": 0,
            "end_hour": 24
        },
        "weekend": {
            "start_hour": 0,
            "end_hour": 24
        }
    }
}
JSON

# Run the generator
./bin/callgen -config configs/test_config.json -csv configs/numbers.csv
EOF

chmod +x run_s1_test.sh

echo "S1 Call Generator fixed and ready!"
echo "To run a test: ./run_s1_test.sh"
EOF
